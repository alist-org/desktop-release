name: Build Linux Arm64
on:
  workflow_dispatch:

jobs:
  build_linux_arm64:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   bundle: bundle/macos/alist-desktop.app
          # - os: ubuntu-22.04
          #   target: x86_64-unknown-linux-gnu
          #   bundle: bundle/deb/alist-desktop_0.0.0_amd64.deb
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   bundle: bundle/msi/alist-desktop_0.0.0_x64_en-US.msi
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   bundle: bundle/macos/alist-desktop.app
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            bundle: bundle/deb/alist-desktop_0.0.0_arm64.deb
            args:

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: alist-dev/desktop
          token: ${{ secrets.MY_TOKEN }}

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo cat > /etc/apt/sources.list <<EOF

          deb http://ports.ubuntu.com/ubuntu-ports/ focal main restricted universe multiverse
          deb http://ports.ubuntu.com/ubuntu-ports/ focal main restricted universe multiverse
          deb http://ports.ubuntu.com/ubuntu-ports/ focal-security main restricted universe multiverse
          deb http://ports.ubuntu.com/ubuntu-ports/ focal-updates main restricted universe multiverse
          deb http://ports.ubuntu.com/ubuntu-ports/ focal-backports main restricted universe multiverse

          EOF

          # https://ubuntu.com/blog/statement-on-32-bit-i386-packages-for-ubuntu-19-10-and-20-04-lts
          # https://askubuntu.com/questions/1252062/how-to-install-libncurses-so-5-in-ubuntu-20-04
          # https://askubuntu.com/questions/522372/installing-32-bit-libraries-on-ubuntu-14-04-lts-64-bit
          # sudo add-apt-repository universe
          sudo dpkg --add-architecture arm64
          sudo apt update
          # install both 32-bit and 64-bit prerequisites of tauri
          # libayatana-appindicator3-dev is the successor of libappindicator3-dev and 64-bit only
          # https://tauri.app/v1/guides/getting-started/prerequisites/#setting-up-linux
          # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
          echo FIX INSTALL FAILED ON GITHUB UBUNTU 22.04 RUNNER
          sudo apt install -y libgcc-s1:arm64 libstdc++6:arm64 libgdk-pixbuf-2.0-dev:arm64 libgdk-pixbuf2.0-dev:arm64 libatomic1:arm64
          echo install tools for 32-bit support ...
          sudo apt install -y --allow-downgrades \
            gcc-multilib \
            g++-multilib
          echo install arm64 dependences ...
          sudo apt install -y --allow-downgrades \
            libwebkit2gtk-4.0-dev:arm64 \
            libssl-dev:arm64 \
            libgtk-3-dev:arm64 \
            librsvg2-dev:arm64 || echo "install 32-bit dependences failed! Check the logs for details."
          # echo install dependences ...
          # sudo apt install -y --allow-downgrades \
          #   libwebkit2gtk-4.0-dev \
          #   libssl-dev \
          #   libgtk-3-dev \
          #   librsvg2-dev \
          #   libayatana-appindicator3-dev
          # use cross to build, so the dependencies are not required!
          # # check docker
          # docker -v
          # docker run -t --rm liudonghua123/cross:x86_64-unknown-linux-gnu-tauri ls -l /lib/x86_64-linux-gnu/
          # docker run -t --rm liudonghua123/cross:x86_64-unknown-linux-gnu-tauri pkg-config --list-all
          # docker run -t --rm liudonghua123/cross:x86_64-unknown-linux-gnu-tauri pkg-config --libs webkit2gtk-4.0
          echo 'ok'
          # sudo apt-get update
          # sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev
          # sudo apt-get install -y libssl-dev pkg-config gcc-10-aarch64-linux-gnu

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm" # Set this to npm, yarn or pnpm.

      - name: Install app dependencies and build web
        run: pnpm i

      # - name: Replace version
      #   run: |
      #     npx tsx ./scripts/version.ts
      #     cat src-tauri/tauri.conf.json
      #   env:
      #     AD_VERSION: ${{ github.ref_name }}

      - name: Get AList version
        id: get-alist-version
        uses: fangqiuming/latest-release-version@v1.2.0-beta
        with:
          repository: AlistGo/alist
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Rclone version
        id: get-rclone-version
        uses: fangqiuming/latest-release-version@v1.2.0-beta
        with:
          repository: rclone/rclone
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download sidecar
        run: npx tsx ./scripts/bin.ts
        env:
          TARGET_TRIPLE: ${{ matrix.target }}
          ALIST_VERSION: ${{ steps.get-alist-version.outputs.tag_name }}
          RCLONE_VERSION: ${{ steps.get-rclone-version.outputs.tag_name }}

      - name: Build the app
        # uses: tauri-apps/tauri-action@v0
        run: |
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
          export PKG_CONFIG_SYSROOT_DIR=/
          pnpm tauri build --target ${{ matrix.target }} ${{ matrix.args }}
        env:
          # GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          # PKG_CONFIG_ALLOW_CROSS: ${{ contains(matrix.target, 'aarch64') && '1' || '' }}
        # with:
        #   tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
        #   releaseName: "AList Desktop v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
        #   releaseBody: "See the assets to download and install this version."
        #   args: "--target ${{ matrix.target }}"

      - name: Show file
        continue-on-error: true
        run: |
          ls -l ./src-tauri/target/${{ matrix.target }}/release/bundle
          tree ./src-tauri/target/${{ matrix.target }}/release/bundle

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: alist-${{ matrix.target }}
          path: ./src-tauri/target/${{ matrix.target }}/release/${{ matrix.bundle }}
